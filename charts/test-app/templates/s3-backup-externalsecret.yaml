---
# ExternalSecret for S3 Backup Credentials
# This fetches per-app S3 credentials from Vault and creates a Kubernetes Secret
#
# Vault Path: secret/<app-name>/s3-backup
# Created by: Crossplane Composition (AppBackupBucket)
#
# The credentials are stored by Crossplane when an AppBackupBucket resource is created.
# Each app gets unique S3 credentials restricted to bucket/<app-name>/* prefix.
#
# Usage: Include this template in your app's Helm chart alongside postgresql-small.yaml

apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ .Chart.Name }}-s3-backup
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Chart.Name }}
    component: database
    secret-type: s3-credentials
spec:
  # Refresh interval - check Vault every 1 hour for credential updates
  refreshInterval: 1h

  # Reference to the ClusterSecretStore (configured globally)
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore

  # Target Kubernetes Secret to create
  target:
    name: {{ .Chart.Name }}-s3-backup
    creationPolicy: Owner

    # Template for the secret data
    # ExternalSecrets will create a secret with these exact keys
    template:
      type: Opaque
      data:
        # AWS S3 compatible format (used by pgBackRest, rclone, etc.)
        AWS_ACCESS_KEY_ID: {% raw %}"{{ .access_key }}"{% endraw %}
        AWS_SECRET_ACCESS_KEY: {% raw %}"{{ .secret_key }}"{% endraw %}

  # Data to fetch from Vault
  data:
    # Fetch access_key from Vault
    - secretKey: access_key
      remoteRef:
        key: secret/{{ .Chart.Name }}/s3-backup
        property: access_key

    # Fetch secret_key from Vault
    - secretKey: secret_key
      remoteRef:
        key: secret/{{ .Chart.Name }}/s3-backup
        property: secret_key
